// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name Pushi
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
@_exported import Pushi
import Swift
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class PushiSetting {
  public static let setting: Pushi.PushiSetting
  public static func didRegisterForRemoteNotificationsWithDeviceToken(deviceToken: Foundation.Data)
  public static func didFailToRegisterForRemoteNotificationsWithError(error: any Swift.Error)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class Pushi : UIKit.UIResponder, UserNotifications.UNUserNotificationCenterDelegate {
  @_Concurrency.MainActor(unsafe) public var deviceToken: Swift.String?
  @_Concurrency.MainActor(unsafe) public static let notification: Pushi.Pushi
  @_Concurrency.MainActor(unsafe) public func askPermission(options: UserNotifications.UNAuthorizationOptions = [.sound, .alert, .badge], showLog: Swift.Bool = false, completionHandler: @escaping (Swift.Bool, (any Swift.Error)?) -> Swift.Void, getDeviceToken: @escaping ((Foundation.Data?, Swift.String?, (any Swift.Error)?) -> Swift.Void), willPresent: @escaping (((UserNotifications.UNNotificationPresentationOptions) -> Swift.Void), [Swift.AnyHashable : Any]) -> Swift.Void, onDidSelect: @escaping ((UIKit.UIViewController, [Swift.AnyHashable : Any]) -> Swift.Bool))
  @_Concurrency.MainActor(unsafe) @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  @objc deinit
}
